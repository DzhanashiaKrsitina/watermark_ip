-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Watermarker\watermark_ip_src_Index_Defin.vhd
-- Created: 2022-05-12 17:01:48
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: watermark_ip_src_Index_Defin
-- Source Path: Watermarker/watermarking/Indexing/Index Definer
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY watermark_ip_src_Index_Defin IS
  PORT( inner                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        outer                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Temp_N                            :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        Mes_N                             :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
        );
END watermark_ip_src_Index_Defin;


ARCHITECTURE rtl OF watermark_ip_src_Index_Defin IS

  -- Component Declarations
  COMPONENT watermark_ip_src_Bit_Divider_block
    PORT( in_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LSBs                            :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
          MSBs                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT watermark_ip_src_Bit_Divider
    PORT( in_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LSBs                            :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
          MSBs                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : watermark_ip_src_Bit_Divider_block
    USE ENTITY work.watermark_ip_src_Bit_Divider_block(rtl);

  FOR ALL : watermark_ip_src_Bit_Divider
    USE ENTITY work.watermark_ip_src_Bit_Divider(rtl);

  -- Signals
  SIGNAL Bit_Divider_Outer_out1           : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Divider_Outer_out2           : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Divider_Outer_out1_unsigned  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Divider_Inner_out1           : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Divider_Inner_out2           : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Divider_Inner_out1_unsigned  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Temp_N_tmp                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Divider_Outer_out2_unsigned  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Divider_Inner_out2_unsigned  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Mes_N_tmp                        : unsigned(5 DOWNTO 0);  -- ufix6

BEGIN
  UBit_Divider_Outer : watermark_ip_src_Bit_Divider_block
    PORT MAP( in_rsvd => outer,  -- uint8
              LSBs => Bit_Divider_Outer_out1,  -- ufix5
              MSBs => Bit_Divider_Outer_out2  -- ufix3
              );

  UBit_Divider_Inner : watermark_ip_src_Bit_Divider
    PORT MAP( in_rsvd => inner,  -- uint8
              LSBs => Bit_Divider_Inner_out1,  -- ufix5
              MSBs => Bit_Divider_Inner_out2  -- ufix3
              );

  Bit_Divider_Outer_out1_unsigned <= unsigned(Bit_Divider_Outer_out1);

  Bit_Divider_Inner_out1_unsigned <= unsigned(Bit_Divider_Inner_out1);

  Temp_N_tmp <= Bit_Divider_Outer_out1_unsigned & Bit_Divider_Inner_out1_unsigned;

  Temp_N <= std_logic_vector(Temp_N_tmp);

  Bit_Divider_Outer_out2_unsigned <= unsigned(Bit_Divider_Outer_out2);

  Bit_Divider_Inner_out2_unsigned <= unsigned(Bit_Divider_Inner_out2);

  Mes_N_tmp <= Bit_Divider_Outer_out2_unsigned & Bit_Divider_Inner_out2_unsigned;

  Mes_N <= std_logic_vector(Mes_N_tmp);

END rtl;

