-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Watermarker\Indexing.vhd
-- Created: 2022-05-12 16:51:49
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Indexing
-- Source Path: Watermarker/watermarking/Indexing
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Indexing IS
  PORT( clk                               :   IN    std_logic;
        rstx                              :   IN    std_logic;
        enb                               :   IN    std_logic;
        message                           :   IN    std_logic;
        Temp0                             :   OUT   std_logic;
        Temp1                             :   OUT   std_logic;
        MessageOut                        :   OUT   std_logic
        );
END Indexing;


ARCHITECTURE rtl OF Indexing IS

  -- Component Declarations
  COMPONENT Index_Definer
    PORT( inner                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          outer                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Temp_N                          :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          Mes_N                           :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
          );
  END COMPONENT;

  COMPONENT ROM_Template_0
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          Temp_N                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ROM_Template_1
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          Temp_N                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic;
          wr_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr : IN std_logic_vector(AddrWidth - 1 DOWNTO 0); -- generic width
          rd_dout                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Index_Definer
    USE ENTITY work.Index_Definer(rtl);

  FOR ALL : ROM_Template_0
    USE ENTITY work.ROM_Template_0(rtl);

  FOR ALL : ROM_Template_1
    USE ENTITY work.ROM_Template_1(rtl);

  FOR ALL : SimpleDualPortRAM_singlebit
    USE ENTITY work.SimpleDualPortRAM_singlebit(rtl);

  -- Signals
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL inner                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_threshold_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL enable                           : std_logic;
  SIGNAL count_step_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL outer                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Temp_N                           : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Index_Definer_out2               : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL Temp0_1                          : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Temp1_1                          : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL count_step_2                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL count_from_2                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL counter                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL count_3                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL need_to_wrap_2                   : std_logic;
  SIGNAL count_value_2                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL enable_1                         : std_logic;

BEGIN
  UIndex_Definer_1 : Index_Definer
    PORT MAP( inner => std_logic_vector(inner),  -- uint8
              outer => std_logic_vector(outer),  -- uint8
              Temp_N => Temp_N,  -- ufix10
              Mes_N => Index_Definer_out2  -- ufix6
              );

  UROM_Template_0_1 : ROM_Template_0
    PORT MAP( clk => clk,
              enb => enb,
              Temp_N => Temp_N,  -- ufix10
              Out1 => Temp0_1
              );

  UROM_Template_1_1 : ROM_Template_1
    PORT MAP( clk => clk,
              enb => enb,
              Temp_N => Temp_N,  -- ufix10
              Out1 => Temp1_1
              );

  USimple_Dual_Port_RAM : SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => message,
              wr_addr => std_logic_vector(counter),
              wr_en => enable_1,
              rd_addr => Index_Definer_out2,
              rd_dout => MessageOut
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 255
  count_step <= to_unsigned(16#01#, 8);

  count_from <= to_unsigned(16#00#, 8);

  count <= inner + count_step;

  
  need_to_wrap <= '1' WHEN inner = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  Counter_Inner_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      inner <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inner <= count_value;
      END IF;
    END IF;
  END PROCESS Counter_Inner_process;


  count_threshold_out1 <= to_unsigned(16#FF#, 8);

  
  Relational_Operator_relop1 <= '1' WHEN inner = count_threshold_out1 ELSE
      '0';

  enable <= Relational_Operator_relop1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 255
  count_step_1 <= to_unsigned(16#01#, 8);

  count_from_1 <= to_unsigned(16#00#, 8);

  count_1 <= outer + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN outer = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  count_value_1 <= count_1 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_2 <= outer WHEN enable = '0' ELSE
      count_value_1;

  Counter_Outer_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      outer <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        outer <= count_2;
      END IF;
    END IF;
  END PROCESS Counter_Outer_process;


  Delay1_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Temp0_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay_rsvd_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Temp1_1;
      END IF;
    END IF;
  END PROCESS Delay_rsvd_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 63
  count_step_2 <= to_unsigned(16#01#, 6);

  count_from_2 <= to_unsigned(16#00#, 6);

  count_3 <= counter + count_step_2;

  
  need_to_wrap_2 <= '1' WHEN counter = to_unsigned(16#3F#, 6) ELSE
      '0';

  
  count_value_2 <= count_3 WHEN need_to_wrap_2 = '0' ELSE
      count_from_2;

  HDL_Counter_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      counter <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counter <= count_value_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  enable_1 <= '1';

  Temp0 <= Delay1_out1;

  Temp1 <= Delay_out1;

END rtl;

