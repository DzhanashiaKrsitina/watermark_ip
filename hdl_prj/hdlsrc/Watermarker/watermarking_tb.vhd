-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Watermarker\watermarking_tb.vhd
-- Created: 2022-05-11 20:00:54
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pixel_out                     ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: watermarking_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.watermarking_pac.ALL;
USE work.watermarking_tb_pac.ALL;

ENTITY watermarking_tb IS
END watermarking_tb;


ARCHITECTURE rtl OF watermarking_tb IS

  -- Component Declarations
  COMPONENT watermarking
    PORT( clk                             :   IN    std_logic;
          rstx                            :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          pixel_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          mes_in                          :   IN    std_logic;
          ce_out                          :   OUT   std_logic;
          pixel_out                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : watermarking
    USE ENTITY work.watermarking(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL rstx                             : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL pixel_out_done                   : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL pixel_out_done_enb               : std_logic;  -- ufix1
  SIGNAL pixel_out_addr                   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL pixel_out_active                 : std_logic;  -- ufix1
  SIGNAL pixel_addr                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL message_addr_delay_1             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL rawData_mes_in                   : std_logic;
  SIGNAL holdData_mes_in                  : std_logic;
  SIGNAL mes_in_offset                    : std_logic;
  SIGNAL mes_in                           : std_logic;
  SIGNAL pixel_active                     : std_logic;  -- ufix1
  SIGNAL pixel_enb                        : std_logic;  -- ufix1
  SIGNAL pixel_addr_delay_1               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rawData_pixel_in                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL holdData_pixel_in                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_in_offset                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_in_1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_in_2                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL pixel_out                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL pixel_out_enb                    : std_logic;  -- ufix1
  SIGNAL pixel_out_lastAddr               : std_logic;  -- ufix1
  SIGNAL pixel_out_unsigned               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_out_addr_delay_1           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL pixel_out_expected               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_out_ref                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_out_testFailure            : std_logic;  -- ufix1

BEGIN
  u_watermarking : watermarking
    PORT MAP( clk => clk,
              rstx => rstx,
              clk_enable => clk_enable,
              pixel_in => pixel_in_2,  -- uint8
              mes_in => mes_in,
              ce_out => ce_out,
              pixel_out => pixel_out  -- uint8
              );

  pixel_out_done_enb <= pixel_out_done AND rdEnb;

  
  pixel_out_active <= '1' WHEN pixel_out_addr /= to_unsigned(16#FFFF#, 16) ELSE
      '0';

  message_addr_delay_1 <= pixel_addr AFTER 1 ns;

  -- Data source for mes_in
  mes_in_fileread: PROCESS (message_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "mes_in.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_mes_in <= read_data;
  END PROCESS mes_in_fileread;

  -- holdData reg for message
  stimuli_message_process: PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      holdData_mes_in <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_mes_in <= rawData_mes_in;
    END IF;
  END PROCESS stimuli_message_process;

  stimuli_message_1: PROCESS (rawData_mes_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      mes_in_offset <= holdData_mes_in;
    ELSE
      mes_in_offset <= rawData_mes_in;
    END IF;
  END PROCESS stimuli_message_1;

  mes_in <= mes_in_offset AFTER 2 ns;

  
  pixel_active <= '1' WHEN pixel_addr /= to_unsigned(16#FFFF#, 16) ELSE
      '0';

  pixel_enb <= pixel_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  pixel_in_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      pixel_addr <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF pixel_enb = '1' THEN
        pixel_addr <= pixel_addr + to_unsigned(16#0001#, 16);
      END IF;
    END IF;
  END PROCESS pixel_in_process;


  pixel_addr_delay_1 <= pixel_addr AFTER 1 ns;

  -- Data source for pixel_in
  pixel_in_fileread: PROCESS (pixel_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "pixel_in.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(7 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_pixel_in <= unsigned(read_data(7 DOWNTO 0));
  END PROCESS pixel_in_fileread;

  -- holdData reg for pixel
  stimuli_pixel_process: PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      holdData_pixel_in <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_pixel_in <= rawData_pixel_in;
    END IF;
  END PROCESS stimuli_pixel_process;

  stimuli_pixel_1: PROCESS (rawData_pixel_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      pixel_in_offset <= holdData_pixel_in;
    ELSE
      pixel_in_offset <= rawData_pixel_in;
    END IF;
  END PROCESS stimuli_pixel_1;

  pixel_in_1 <= pixel_in_offset AFTER 2 ns;

  pixel_in_2 <= std_logic_vector(pixel_in_1);

  snkDonen <=  NOT check1_done;

  resetn <=  NOT rstx;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN check1_done = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  rstx_gen: PROCESS 
  BEGIN
    rstx <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    rstx <= '0';
    WAIT;
  END PROCESS rstx_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  pixel_out_enb <= ce_out AND pixel_out_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  c_3_process : PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      pixel_out_addr <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF pixel_out_enb = '1' THEN
        pixel_out_addr <= pixel_out_addr + to_unsigned(16#0001#, 16);
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  pixel_out_lastAddr <= '1' WHEN pixel_out_addr = to_unsigned(16#FFFF#, 16) ELSE
      '0';

  pixel_out_done <= pixel_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF pixel_out_done_enb = '1' THEN
        check1_done <= pixel_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  pixel_out_unsigned <= unsigned(pixel_out);

  pixel_out_addr_delay_1 <= pixel_out_addr AFTER 1 ns;

  -- Data source for pixel_out_expected
  pixel_out_expected_fileread: PROCESS (pixel_out_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "pixel_out_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(7 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    pixel_out_expected <= unsigned(read_data(7 DOWNTO 0));
  END PROCESS pixel_out_expected_fileread;

  pixel_out_ref <= pixel_out_expected;

  pixel_out_unsigned_checker: PROCESS (clk, rstx)
  BEGIN
    IF rstx = '1' THEN
      pixel_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND pixel_out_unsigned /= pixel_out_ref THEN
        pixel_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in pixel_out_unsigned: Expected " & to_hex(pixel_out_ref) & (" Actual " & to_hex(pixel_out_unsigned))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS pixel_out_unsigned_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF pixel_out_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

