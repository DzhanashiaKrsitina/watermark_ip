// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Watermarker\watermarking_dpi_tb.sv
// Created: 2022-05-11 20:00:39
// 
// -- Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pixel_out                     ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: watermarking_dpi_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module watermarking_dpi_tb;

  logic clk;
  logic rstx;
  logic enb;
  logic const_true;
  logic snkDone;
  logic const_false;
  logic dutEnable;
  logic [7:0] dpi_1;  /* ufix8 */
  logic [7:0] dpi_1_temp;  /* ufix8 */
  logic [7:0] pixel_in;  /* uint8 */
  logic [7:0] dpi_2;  /* ufix8 */
  logic dpi_2_temp;
  logic mes_in;
  logic [7:0] pixel_out;  /* uint8 */
  logic ce_out;
  logic dpiReset;
  logic dpiEnable;
  logic dpiEnbDelay;
  logic [7:0] dpi_3;  /* ufix8 */
  logic [7:0] pixel_out_ref;  /* uint8 */
  logic pixel_out_testFailure;
  logic isTestFailed;
  logic rdEnb;


  assign const_true = 1'b1;



  assign #655370 snkDone = const_true;

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : rstx_gen
      rstx <= 1'b1;
      # (30);
      @ (posedge clk)
      # (2);
      rstx <= 1'b0;
    end

  assign const_false = 1'b0;



  assign enb = (rstx == 1'b0 ? const_true :
              const_false);



  // Delay inside enable generation: register depth 
  always @(posedge clk or posedge rstx)
    begin : dut_enable_delay
      if (rstx) begin
        dutEnable <= 0;
      end
      else begin
        dutEnable <= enb;
      end
    end

  assign dpi_1_temp = dpi_1;

  assign pixel_in = dpi_1_temp;



  assign dpi_2_temp = dpi_2[0];



  assign mes_in = (dpi_2_temp != 1'b0 ? 1'b1 :
              1'b0);



  watermarking u_watermarking (.pixel_in(pixel_in),  /* uint8 */
                               .mes_in(mes_in),
                               .clk(clk),
                               .rstx(rstx),
                               .clk_enable(dutEnable),
                               .pixel_out(pixel_out),  /* uint8 */
                               .ce_out(ce_out)
                               );

  initial
    begin : dpiReset_gen
      dpiReset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      dpiReset <= 1'b0;
    end

  assign dpiEnable = (dpiReset == 1'b0 ? const_true :
              const_false);



  // Delay inside enable generation: register depth 
  always @(posedge clk or posedge dpiReset)
    begin : dut_enable_delay_1
      if (dpiReset) begin
        dpiEnbDelay <= 0;
      end
      else begin
        dpiEnbDelay <= dpiEnable;
      end
    end

  gm_Watermarker_ref_dpi #(.loop_factor(1),
                           .overclocking_factor(1)
                           )
                         u_gm_Watermarker_ref_dpi (.clk(clk),
                                                   .reset(dpiReset),
                                                   .clk_enable(dpiEnbDelay),
                                                   .dpi_1(dpi_1),  /* ufix8 */
                                                   .dpi_2(dpi_2),  /* ufix8 */
                                                   .dpi_3(dpi_3)  /* ufix8 */
                                                   );

  assign pixel_out_ref = dpi_3;



  always @(posedge clk or posedge rstx)
    begin : pixel_out_checker
      if (rstx == 1'b1) begin
        pixel_out_testFailure <= 1'b0;
      end
      else begin
        if (dutEnable == 1'b1 && pixel_out !== pixel_out_ref) begin
          pixel_out_testFailure <= 1'b1;
          $display("ERROR in pixel_out at time %t : Expected '%h' Actual '%h'", $time, pixel_out_ref, pixel_out);
        end
      end
    end

  assign isTestFailed = pixel_out_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (isTestFailed == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // watermarking_dpi_tb

